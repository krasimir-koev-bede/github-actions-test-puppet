name: Puppet Version Bump

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment in the format <region3><client3><env4> (10 characters, no separators)'
        required: true
      version:
        description: 'Version in format x.y.z.w (separators "." or "-")'
        required: true

jobs:
  bump-version:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.BUMP_TOKEN }}
          fetch-depth: 0
          persist-credentials: true

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Parse inputs
        shell: bash
        run: |
          set -euxo pipefail
          env_str="${{ inputs.environment }}"
          region="${env_str:0:3}"
          client="${env_str:3:3}"
          ENV_NAME="${env_str:6:4}"
          echo "REGION=$region" >> $GITHUB_ENV
          echo "CLIENT=$client" >> $GITHUB_ENV
          echo "ENV_NAME=$ENV_NAME" >> $GITHUB_ENV
          echo "VERSION=${{ inputs.version }}" >> $GITHUB_ENV

      - name: Update client-region-env file
        shell: bash
        run: |
          file="values/$CLIENT/$REGION/$ENV_NAME.yaml"
          echo "> [Info] Updating $file with version $VERSION"
          if [[ -f "$file" ]]; then
            yq eval -i ".puppetVersionEnvOverride |= with_entries(.value = strenv(VERSION))" "$file"
          fi

      - name: Update client-env file
        shell: bash
        run: |
          file="values/$CLIENT/$ENV_NAME.yaml"
          echo "> [Info] Updating $file with version $VERSION"
          if [[ -f "$file" ]]; then
            yq eval -i ".puppetVersionEnvOverride |= with_entries(.value = strenv(VERSION))" "$file"
          fi

      - name: Update proxy.yaml
        shell: bash
        run: |
          file="values/proxy.yaml"
          echo "> [Info] Updating $file with version $VERSION"
          if [[ -f "$file" ]]; then
            yq eval -i ".puppetVersion = strenv(VERSION)" "$file"
          fi

      - name: Show git diff of changes
        shell: bash
        run: |
          echo "> [Info] Showing changes"
          git diff --color=always values/proxy.yaml values/$CLIENT/$REGION/$ENV_NAME.yaml values/$CLIENT/$ENV_NAME.yaml || true

      - name: Create branch
        id: create_branch
        shell: bash
        run: |
          set -euxo pipefail
          BRANCH="puppet-version-bump-$REGION-$CLIENT-$ENV_NAME-$VERSION"
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b "$BRANCH"

      - name: Commit changes
        shell: bash
        run: |
          set -euxo pipefail
          git add values/proxy.yaml values/$CLIENT/$REGION/$ENV_NAME.yaml values/$CLIENT/$ENV_NAME.yaml
          git commit -m "[Minor][FAB-000] Puppet version bump $REGION-$CLIENT-$ENV_NAME-$VERSION"

      - name: Push branch
        shell: bash
        run: |
          set -euxo pipefail
          BRANCH=${{ steps.create_branch.outputs.branch }}
          git push "https://x-access-token:${{ secrets.BUMP_TOKEN }}@github.com/${{ github.repository }}.git" HEAD:$BRANCH

      - name: Create Pull Request with gh
        env:
          GITHUB_TOKEN: ${{ secrets.BUMP_TOKEN }}
          REGION: ${{ env.REGION }}
          CLIENT: ${{ env.CLIENT }}
          ENV_NAME: ${{ env.ENV_NAME }}
          VERSION: ${{ env.VERSION }}
          BRANCH: ${{ steps.create_branch.outputs.branch }}
        shell: bash
        run: |
          set -euxo pipefail

          # Create the pull request using GH_TOKEN auth
          gh pr create \
            --head "$BRANCH" \
            --base main \
            --title "[Minor][FAB-000] Puppet version bump $REGION-$CLIENT-$ENV_NAME-$VERSION" \
            --body "This PR bumps the Puppet version to '$VERSION' for environment '$REGION$CLIENT$ENV_NAME'"
